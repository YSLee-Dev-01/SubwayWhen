//
//  SettingViewModel.swift
//  SubwayWhen
//
//  Created by Ïù¥Ïú§Ïàò on 2023/02/16.
//

import Foundation

import RxSwift
import RxCocoa
import RxOptional

class SettingViewModel {
    // OUTPUT
    let cellData : Driver<[SettingTableViewCellSection]>
    let keyboardClose : Driver<Void>
    let modalPresent : Driver<SettingTableViewCellData>
    
    // INPUT
    let cellClick = PublishRelay<SettingTableViewCellData>()
    
    // MODEL
    let settingTableViewCellModel = SettingTableViewCellModel()
    
    let bag = DisposeBag()
    
    init(){
        // Î™®Îã¨ present
        self.modalPresent = self.cellClick
            .filter{
                $0.inputType == .NewVC
            }
            .asDriver(onErrorDriveWith: .empty())
        
        // ÌÇ§Î≥¥Îìú Îã´Í∏∞
        self.keyboardClose = self.settingTableViewCellModel.keyboardClose
            .asDriver(onErrorDriveWith: .empty())
        
        // ÏÑ§Ï†ï ÏÖÄ Íµ¨ÏÑ±
        self.cellData = Observable<[SettingTableViewCellSection]>.create{
            $0.onNext(
                [
                    SettingTableViewCellSection(sectionName: "Ìôà", items: [
                        .init(settingTitle: "ÌòºÏû°ÎèÑ Ïù¥Î™®ÏßÄ", defaultData: FixInfo.saveSetting.mainCongestionLabel ,inputType: .TextField, groupType: .Main),
                        .init(settingTitle: "ÌäπÏ†ï Í∑∏Î£π ÏãúÍ∞Ñ", defaultData: "", inputType: .NewVC, groupType: .Main)
                    ]),
                    SettingTableViewCellSection(sectionName: "ÏÉÅÏÑ∏ÌôîÎ©¥", items: [
                        .init(settingTitle: "ÏûêÎèô ÏÉàÎ°ú Í≥†Ïπ®",defaultData: "\(FixInfo.saveSetting.detailAutoReload)", inputType: .Switch, groupType: .Detail),
                        .init(settingTitle: "ÏãúÍ∞ÑÌëú ÏûêÎèô Ï†ïÎ†¨",defaultData: "\(FixInfo.saveSetting.detailScheduleAutoTime)", inputType: .Switch, groupType: .Detail)
                    ]),
                    SettingTableViewCellSection(sectionName: "Í≤ÄÏÉâ", items: [
                        .init(settingTitle: "Ï§ëÎ≥µ Ï†ÄÏû• Î∞©ÏßÄ",defaultData: "\(FixInfo.saveSetting.searchOverlapAlert)", inputType: .Switch, groupType: .Detail)
                    ]),
                    SettingTableViewCellSection(sectionName: "Í∏∞ÌÉÄ", items: [
                        .init(settingTitle: "Ïò§Ìîà ÎùºÏù¥ÏÑ†Ïä§", defaultData: "", inputType: .NewVC, groupType: .Other),
                        .init(settingTitle: "Í∏∞ÌÉÄ", defaultData: "", inputType: .NewVC, groupType: .Other)
                    ])
                ]
            )
            $0.onCompleted()
            
            return Disposables.create()
        }
        .asDriver(onErrorDriveWith: .empty())
        
        // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Ïó¨Î∂Ä
        self.settingTableViewCellModel.cellIndex
            .withLatestFrom(self.settingTableViewCellModel.switchValue){ index, value -> Bool? in
                if index == IndexPath(row: 0, section: 1){
                    return value
                }else{
                    return nil
                }
            }
            .filterNil()
            .subscribe(onNext: {
                FixInfo.saveSetting.detailAutoReload = $0
            })
            .disposed(by: self.bag)
        
        // ÏãúÍ∞ÑÌëú Ï†ïÎ†¨
        self.settingTableViewCellModel.cellIndex
            .withLatestFrom(self.settingTableViewCellModel.switchValue){ index, value -> Bool? in
                if index == IndexPath(row: 1, section: 1){
                    return value
                }else{
                    return nil
                }
            }
            .filterNil()
            .subscribe(onNext: {
                FixInfo.saveSetting.detailScheduleAutoTime = $0
            })
            .disposed(by: self.bag)
        
        // Ï§ëÎ≥µ Ï†ÄÏû• Î∞©ÏßÄ
        self.settingTableViewCellModel.cellIndex
            .withLatestFrom(self.settingTableViewCellModel.switchValue){ index, value -> Bool? in
                if index == IndexPath(row: 0, section: 2){
                    return value
                }else{
                    return nil
                }
            }
            .filterNil()
            .subscribe(onNext: {
                FixInfo.saveSetting.searchOverlapAlert = $0
            })
            .disposed(by: self.bag)
        
        // Î©îÏù∏ ÌòºÏû°ÎèÑ Ïù¥Î™®ÏßÄ Î≥ÄÍ≤Ω
       self.settingTableViewCellModel.cellIndex
            .withLatestFrom(self.settingTableViewCellModel.tfValue){ index, tf -> String? in
                if index == IndexPath(row: 0, section: 0){
                    return tf
                }else{
                    return nil
                }
            }
            .filterNil()
            .subscribe(onNext: {
                let label = $0 == "" ? "üòµ" : $0
                FixInfo.saveSetting.mainCongestionLabel = label
                print("Î∞îÍøà")
            })
            .disposed(by: self.bag)
    }
}
